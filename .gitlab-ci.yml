stages:
  - build_and_test
  - upload
  - deploy

# If you are looking for a place where to add 'UNITY_LICENSE_FILE' and other secrets, please visit your project's gitlab page:
# settings > CI/CD > Variables instead
variables:
  # BUILD_NAME most not contain any spaces.
  BUILD_NAME: "YellowCatTaxi"
  UNITY_ACTIVATION_FILE: ./unity3d.alf
  UNITY_VERSION: "2021.2.13f1"
  IMAGE: unityci/editor # https://hub.docker.com/r/unityci/editor
  IMAGE_VERSION: "0.17.2" # https://github.com/game-ci/docker/releases
  UNITY_DIR: $CI_PROJECT_DIR # this needs to be an absolute path. Defaults to the root of your tree.
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/buildtargets/${CI_COMMIT_TAG}/"
  ITCHIO_NAME: yanniboi/taxi

image: $IMAGE:$UNITY_VERSION-base-$IMAGE_VERSION

.unity_before_script: &unity_before_script
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh

.cache: &cache
  cache:
    #    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM"
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-main-" # Using the commit ref in cache key disables caching for tags.
    paths:
      - $UNITY_DIR/Library/

.license: &license
  rules:
    - if: '$UNITY_LICENSE != null'
      when: always

#get-activation-file:
#  rules:
#    - if: '$UNITY_LICENSE == null'
#      when: manual
#  stage: build_and_test
#  script:
#    - chmod +x ./ci/get_activation_file.sh && ./ci/get_activation_file.sh
#  artifacts:
#    paths:
#      - $UNITY_ACTIVATION_FILE
#    expire_in: 10 min # Expiring this as artifacts may contain sensitive data and should not be kept public
#
#.test: &test
#  stage: build_and_test
#  <<: *unity_before_script
#  <<: *cache
#  <<: *license
#  script:
#    - chmod +x ./ci/test.sh && ./ci/test.sh
#  artifacts:
#    when: always
#    expire_in: 2 weeks
#  # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
#  # you may need to remove or replace these to fit your need if you are using your own runners
#  tags:
#    - gitlab-org
#  coverage: /<Linecoverage>(.*?)</Linecoverage>/
#  rules:
#    - if: '$CI_COMMIT_BRANCH == "main"'

#test-playmode:
#  <<: *test
#  variables:
#    TEST_PLATFORM: playmode

#test-editmode:
#  <<: *test
#  variables:
#    TEST_PLATFORM: editmode

.build: &build
  stage: build_and_test
  <<: *unity_before_script
  <<: *cache
  <<: *license
  script:
    - chmod +x ./ci/build.sh && ./ci/build.sh
  artifacts:
    paths:
      - $UNITY_DIR/Builds/
    expire_in: 2 days
  # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
  # you may need to remove or replace these to fit your need if you are using your own runners
  tags:
    - gitlab-org
  rules:
    - if: $CI_COMMIT_TAG

#build-StandaloneLinux64:
#  <<: *build
#  variables:
#    BUILD_TARGET: StandaloneLinux64
#
#build-StandaloneOSX:
#  <<: *build
#  image: $IMAGE:$UNITY_VERSION-mac-mono-$IMAGE_VERSION
#  variables:
#    BUILD_TARGET: StandaloneOSX
#
#build-StandaloneWindows64:
#  <<: *build
#  image: $IMAGE:$UNITY_VERSION-windows-mono-$IMAGE_VERSION
#  variables:
#    BUILD_TARGET: StandaloneWindows64

# For webgl support, you need to set Compression Format to Disabled for v0.9. See https://github.com/game-ci/docker/issues/75
build-WebGL:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-webgl-$IMAGE_VERSION
  # Temporary workaround for https://github.com/game-ci/docker/releases/tag/v0.9 and webgl support in current project to prevent errors with missing ffmpeg
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh
    - apt-get update && apt-get install ffmpeg -y
  variables:
    BUILD_TARGET: WebGL

#build-android:
#  <<: *build
#  image: $IMAGE:$UNITY_VERSION-android-$IMAGE_VERSION
#  variables:
#    BUILD_TARGET: Android
#    BUNDLE_VERSION_CODE: $CI_PIPELINE_IID
#    BUILD_APP_BUNDLE: "false"
#
#build-android-bundle:
#  <<: *build
#  image: $IMAGE:$UNITY_VERSION-android-$IMAGE_VERSION
#  variables:
#    BUILD_TARGET: Android
#    BUNDLE_VERSION_CODE: $CI_PIPELINE_IID
#    BUILD_APP_BUNDLE: "true"

#upload:
#  stage: upload
#  image: eamonwoortman/alpine-curl-zip
#  needs: [ "build-StandaloneLinux64", "build-StandaloneOSX", "build-StandaloneWindows64" ]
#  rules:
#    - if: '$CI_COMMIT_TAG =~ /^r.+$/'
#  script:
#    - zip -r StandaloneLinux64 $UNITY_DIR/Builds/StandaloneLinux64/*
#    - zip -r StandaloneOSX $UNITY_DIR/Builds/StandaloneOSX/*
#    - zip -r StandaloneWindows64 $UNITY_DIR/Builds/StandaloneWindows64/*
#    - |
#      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file StandaloneLinux64.zip ${PACKAGE_REGISTRY_URL}
#    - |
#      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file StandaloneOSX.zip ${PACKAGE_REGISTRY_URL}
#    - |
#      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file StandaloneWindows64.zip ${PACKAGE_REGISTRY_URL}

.deploy: &deploy
  stage: deploy
  tags:
    - gitlab-org
  rules:
    - if: $CI_COMMIT_TAG

deploy-itch:
  <<: *deploy
  image: benjymous/docker-itch-butler
#  needs: [ "build-WebGL", "build-StandaloneLinux64", "build-StandaloneOSX", "build-StandaloneWindows64" ]
  needs: [ "build-WebGL" ]
  script:
    - butler push $UNITY_DIR/Builds/WebGL $ITCHIO_NAME:web-stable
#    - butler push $UNITY_DIR/Builds/StandaloneLinux64 $ITCHIO_NAME:linux-stable
#    - butler push $UNITY_DIR/Builds/StandaloneOSX $ITCHIO_NAME:macosx-stable
#    - butler push $UNITY_DIR/Builds/StandaloneWindows64 $ITCHIO_NAME:windows-stable

#deploy-android:
#  <<: *deploy
#  image: ruby
#  needs: ["build-android-bundle"]
#  script:
#    - cd $UNITY_DIR/Builds/Android
#    - echo $GPC_TOKEN > gpc_token.json
#    - cp $CI_PROJECT_DIR/Gemfile .
#    - gem install bundler
#    - bundle install
##    - fastlane supply --aab $BUILD_NAME.aab --track internal --package_name com.yanniboi.TowerOffender --release_status draft --json_key ./gpc_token.json
#    - fastlane supply --aab $BUILD_NAME.aab --track internal --package_name com.yanniboi.GDFGJam6 --release_status draft --json_key ./gpc_token.json
#
#deploy-pages:
#  <<: *deploy
#  image: alpine:latest
#  needs: ["build-WebGL"]
#  script:
#    - mv "$UNITY_DIR/Builds/WebGL/${BUILD_NAME}" public
#  artifacts:
#    paths:
#      - public
#    expire_in: 2 weeks

#deploy-release:
#  <<: *deploy
#  needs: [ "upload" ]
#  image: registry.gitlab.com/gitlab-org/release-cli:latest
#  rules:
#    - if: '$CI_COMMIT_TAG =~ /^r.+$/'
#  script:
#    - echo 'running release_job'
#  before_script:
#    - echo "Checking for release description text."
## @todo Find a way to create meaningful release descriptions.
##    - chmod +x ./ci/release_before_script.sh && ./ci/release_before_script.sh
#  release:
#    name: 'Release $CI_COMMIT_TAG'
#    description: 'Created using the release-cli $EXTRA_DESCRIPTION'  # $EXTRA_DESCRIPTION must be defined
#    tag_name: '$CI_COMMIT_TAG'                                       # elsewhere in the pipeline.
#    ref: '$CI_COMMIT_TAG'
#    assets: # Optional, multiple asset links
#      links:
#        - name: 'Linux build'
#          url: '${PACKAGE_REGISTRY_URL}StandaloneLinux64.zip'
#        - name: 'OSX build'
#          url: '${PACKAGE_REGISTRY_URL}StandaloneOSX.zip'
#        - name: 'Windows build'
#          url: '${PACKAGE_REGISTRY_URL}StandaloneWindows64.zip'


#deploy-steam:
#  <<: *deploy
#  image: cm2network/steamcmd
#  rules:
#    - if: '$CI_COMMIT_TAG =~ /^s.+$/'
#  needs: [ "build-StandaloneLinux64", "build-StandaloneOSX", "build-StandaloneWindows64" ]
#  script:
#    # Copy config and sentry files from the cache if they exist
#    - >
#      [ ! -d ./steam_cache ] && mkdir ./steam_cache;
#      ls -al ./steam_cache;
#      cp ./steam_cache/config.vdf /home/steam/Steam/config/ 2>/dev/null || echo "No cached config file";
#      cp ./steam_cache/ssfn* /home/steam/Steam/ 2>/dev/null || echo "No cached sentry file";
#
#    # Update the description in the build VDF.
#    - sed -i -e "s/STEAM_DESCRIPTION/${CI_COMMIT_REF_NAME} - ${CI_COMMIT_SHORT_SHA}/" ci/steam/app_build_1769870.vdf;
#
#    # Push build to Steam
#    - /home/steam/steamcmd/steamcmd.sh +set_steam_guard_code "$STEAM_GUARD_CODE" +login "$STEAM_BUILD_USERNAME" "$STEAM_BUILD_PASSWORD" +run_app_build "$PWD/ci/steam/app_build_1769870.vdf" +quit
#
#    # Copy config and setry files into the cache
#    - ls -al /home/steam/Steam/config/
#    - cp /home/steam/Steam/config/config.vdf /home/steam/Steam/ssfn* ./steam_cache/
#  cache:
#    paths:
#      - ./steam_cache/
#      - ./steam_build_output/

workflow:
  rules:
    - if: $CI_COMMIT_TAG
#    - if: '$CI_COMMIT_BRANCH == "main"'
